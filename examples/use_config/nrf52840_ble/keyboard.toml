[keyboard]
name = "RMK Keyboard"
product_name = "My RMK Keyboard"
vendor_id = 0x4c4b
product_id = 0x4643
manufacturer = "haobo"
chip = "nrf52840"

[matrix]
# Input and output pins are mandatory
input_pins = ["P1_00", "P1_01", "P1_02", "P1_07"]
output_pins = ["P1_05", "P1_06", "P1_03"]
# WARNING: Currently row2col/col2row is set in RMK's feature gate, row2col config here is valid ONLY when you're using cloud compilation
# row2col = true

[layout]
rows = 4
cols = 3
layers = 2
keymap = [
    [
        ["A", "A", "A"],
        ["Kc1", "Kc2", "Kc3"],
        ["LCtrl", "MO(1)", "LShift"],
        ["OSL(1)", "LT(2, Kc9)", "LM(1, LShift | LGui)"]
    ],
    [
        ["TO(1)", "TT(1)", "TG(2)"],
        ["DF(1)", "_", "_"],
        ["_", "_", "_"],
        ["_", "_", "_"]
    ],
]

[light]
# All light pins are high-active by default, uncomment if you want it to be low-active
capslock.pin = "P0_30"
capslock.low_active = false
# scrolllock.pin = "PA3"
# scrolllock.low_active = true
# Just ignore if no light pin is used for it
# numslock.pin = "PA5"
# numslock.low_active = true

[storage]
# Storage feature is enabled by default
# enabled = false
# clear_storage = true

[ble]
enabled = true
# vddh has an internal voltage divider
battery_adc_pin = "vddh"
# Or
# battery_adc_pin = "P0_04"
# adc_divider_measured = 2000
# adc_divider_total = 2806
charge_state.pin = "P0_25"
charge_state.low_active = false
charge_led.pin = "P0_29"
charge_led.low_active = false

[behavior.combo]
timeout = "150ms"
combos = [
  # Press J and K keys simultaneously to output "L"
  { actions = ["J", "K"], output = "L" },
  # Press F and D keys simultaneously to switch to layer 2, but only valid on layer 0
  { actions = ["F", "D"], output = "TO(1)", layer = 0 },
  # Three-key combo, press A, S, and D keys to output "X"
  { actions = ["A", "S", "D"], output = "X" }
]

[behavior.fork]
forks = [
  # Shift + '.' output ':' key
  { trigger = "Dot", negative_output = "Dot", positive_output = "WM(Semicolon, LShift)", match_any = "LShift|RShift" },

  # Shift + ',' output ';' key but only if no Alt is pressed
  { trigger = "Comma", negative_output = "Comma", positive_output = "Semicolon", match_any = "LShift|RShift", match_none = "LAlt|RAlt" },  
  
  # left bracket outputs by default '{', with shifts pressed outputs '['  
  { trigger = "LeftBracket", negative_output = "WM(LeftBracket, LShift)", positive_output = "LeftBracket", match_any = "LShift|RShift" },

  # flip the effect of shift on 'x'/'X'
  { trigger = "X", negative_output = "WM(X, LShift)", positive_output = "X", match_any = "LShift|RShift" },

  # F24 usually outputs 'a', except when Left Shift or Ctrl pressed, in that case triggers a macro 
  { trigger = "F24", negative_output = "A", positive_output = "Macro1", match_any = "LShift|LCtrl" },

  # swap Z and Y keys if MouseBtn1 is pressed (on the keyboard)  
  { trigger = "Y", negative_output = "Y", positive_output = "Z", match_any = "MouseBtn1" },
  { trigger = "Z", negative_output = "Z", positive_output = "Y", match_any = "MouseBtn1" },

  # Shift + Backspace output Delete key (inside a layer tap/hold)
  { trigger = "LT(2,Backspace)", negative_output = "LT(2,Backspace)", positive_output = "LT(2,Delete)", match_any = "LShift|RShift" }
]